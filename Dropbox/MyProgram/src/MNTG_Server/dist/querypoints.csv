/*global Raphael, d3, $, define */
/*!
 * Chord的兼容性定义
 */;
(function (name, definition) {
  if (typeof define === 'function') { // Module
    define(definition);
  } else { // Assign to common namespaces or simply the global object (window)
    this[name] = definition(function (id) {
      return this[id];
    });
  }
})('Chord', function (require) {
  var DataV = require('DataV');

  /**
   * 构造函数
   * @param {Object} node 表示在html的哪个容器中绘制该组件
   * @param {Object} options 为用户自定义的组件的属性，比如画布大小
   */
  var Chord = DataV.extend(DataV.Chart, {
    initialize: function (node, options) {
      this.type = "Chord";
      this.node = this.checkContainer(node);
      this.matrix = [];
      this.groupNames = []; //数组：记录每个group的名字

      //图的大小设置
      this.defaults.legend = true;
      this.defaults.width = 800;
      this.defaults.height = 800;

      this.dimension.from = {
        type: "string",
        required: true,
        index: 0,
      };

      this.dimension.to = {
        type: "string",
        required: true,
        index: 1,
      };
      /**
       * 值纬度
       */
      this.dimension.value = {
        type: "number",
        required: true,
        index: 2
      };


      //设置用户指定的属性
      this.setOptions(options);

      this.legendArea = [20, (this.defaults.height - 20 - 220), 200, 220];
      if (this.defaults.legend) {
        this.xOffset = this.legendArea[2];
      } else {
        this.xOffset = 0;
      }

      this.defaults.innerRadius = Math.min((this.defaults.width - this.xOffset), this.defaults.height) * 0.38;
      this.defaults.outerRadius = this.defaults.innerRadius * 1.10;
      //创建画布
      this.createCanvas();
    }
  });

  /**
   * 创建画布
   */
  Chord.prototype.createCanvas = function () {
    this.canvas = new Raphael(this.node, this.defaults.width, this.defaults.h